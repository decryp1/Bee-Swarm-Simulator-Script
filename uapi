local ver = 1

local xlp = {
    ["humanoidrootpart"] = function()
        return game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
    end,
    ["humanoid"] = function() 
        return game:GetService("Players").LocalPlayer.Character.Humanoid
    end,

    ["tween"] = function(time, pos)
    local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
    humanoidRootPart.Anchored = true
    local tween = game:GetService("TweenService"):Create(humanoidRootPart, TweenInfo.new(time, Enum.EasingStyle.Exponential), {CFrame = pos})
    tween:Play()
    tween.Completed:Wait()
    humanoidRootPart.Anchored = false
    end,

    ["tween2"] = function(time, pos)
    local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
    local tween = game:GetService("TweenService"):Create(humanoidRootPart, TweenInfo.new(time, Enum.EasingStyle.Linear), {CFrame = pos})
    tween:Play()
    end,
    
    ["walkTo"] = function(v3) -- walk to position (not pathfinding)
       game:GetService("Players").LocalPlayer.Character.Humanoid:MoveTo(v3) 
    end,
    ["isExist"] = function(obj) -- check for object, if it exists then we'll return true
        if obj ~= nil then
           return true
        end
    end,
    ["notify"] = function(title, description, duration)
        pcall(function()
            game.StarterGui:SetCore("SendNotification", {
                Title = title;
                Text = description;
                Duration = duration;
            })
        end)
    end,
    
    ['getclosestpart'] = function(path, t)
        local root = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        if root == nil then return end
        local studs = math.huge
        local part;
        if not t then
            t = "descendants"
        end
        if t == "descendants" then
            for _, obj in ipairs(path:GetDescendants()) do
                if obj:IsA('BasePart') then
                    local distance = (root.Position - obj.Position).Magnitude
                    if distance < studs then
                        studs = distance
                        part = obj
                    end
                end
            end
        else
            for _, obj in ipairs(path:GetDescendants()) do
                if obj:IsA('BasePart') then
                    local distance = (root.Position - obj.Position).Magnitude
                    if distance < studs then
                        studs = distance
                        part = obj
                    end
                end
            end
        end
        return part
    end,
    ['getsmallestpart'] = function(path, typee, magnitude)
        if not typee then
            typee = "BasePart"
        end
        if typee ~= "BasePart" and typee ~= "MeshPart" then
            typee = "BasePart"
        end
        if not magnitude then
            magnitude = math.huge
        end
        local root = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        if root == nil then return end
        local size = Vector3.new(math.huge,math.huge,math.huge)
        local part;
        for _, obj in ipairs(path:GetDescendants()) do
            if obj:IsA(typee) then
                local objsize = obj.Size
                if objsize.X < size.X and objsize.Y < size.Y and (obj.Position-root.Position).magnitude < magnitude then
                    size = objsize
                    part = obj
                end
            end
        end
        return part
    end,
    ['generaterandomstring'] = function(a)
        local let = ('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'):split('')
        local string = '' 
        for i = 1, a do 
            string = string..let[math.random(1, #let)]
        end 
        return string 
    end,
    ['request'] = syn and syn.request or http and http.request or http_request or httprequest or request,
    ['pathfindserv'] = game:GetService('PathfindingService'),
    ['toHMS'] = function(t)
        Minutes = (t - t%60)/60
        t = t - Minutes*60
        Hours = (Minutes - Minutes%60)/60
        Minutes = Minutes - Hours*60
        return string.format("%02i", Hours)..":"..string.format("%02i", Minutes)..":"..string.format("%02i", t)
    end,
    ['tablefind'] = function(tt, va)
        for i,v in pairs(tt) do
            if v == va then
                return i
            end
        end
    end,

    ['teleport'] = function(cf)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = cf
    end,
    ['findvalue'] = function(Table, Value)
        if type(Table) == "table" then
            for index, value in pairs(Table) do
                if value == Value then
                    return true
                end
            end
        else
            return false
        end
        return false
    end,
    ['webhook'] = function(hook, color, title, description)
        pcall(function()
            local OSTime = os.time();
            local Time = os.date('!*t', OSTime);
            local Embed = {
                color = color;
                title =  title;
                description = description;
            };
    
            (syn and syn.request or http_request) {
                Url = hook;
                Method = 'POST';
                Headers = {
                    ['Content-Type'] = 'application/json';
                };
                Body = game:GetService'HttpService':JSONEncode( { content = Content; embeds = { Embed } } );
            };
        end)
    end,
   
    ['pathfind'] = function(target)
        local PathfindingService = game:GetService("PathfindingService")
        local Humanoid = game.Players.LocalPlayer.Character.Humanoid
        local Root = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local path = PathfindingService:CreatePath({
            AgentCanJump = true,
            WaypointSpacing = 1
        })
        path:ComputeAsync(Root.Position, target)
        local waypoints = path:GetWaypoints()
        for i, waypoint in ipairs(waypoints) do
            game:GetService("Players").LocalPlayer.Character.Humanoid:MoveTo(waypoint.Position)
            game:GetService("Players").LocalPlayer.Character.Humanoid.MoveToFinished:wait()
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                Humanoid.Jump = true
            end
        end
    end,
    
    ['getbiggestmodel'] = function(path)
        local part
        for i,v in next, path:GetChildren() do
            if v:IsA("Model") then
                if part == nil then
                    part = v
                end
                if v:GetExtentsSize().Y > part:GetExtentsSize().Y then
                    part = v
                end
            end
        end
        return part
    end,
    ['imagehook'] = function(hook, description, title, image, duration)
        pcall(function()
            local OSTime = os.time();
            local Time = os.date('!*t', OSTime);
            local Embed = {
                color = '3454955';
                title =  title;
                description = description;
                thumbnail = {
                    url = image;
                };
                author = {
                    name = game.Players.LocalPlayer.Name;
                };
            };
    
            (syn and syn.request or http_request) {
                Url = hook;
                Method = 'POST';
                Headers = {
                    ['Content-Type'] = 'application/json';
                };
                Body = game:GetService'HttpService':JSONEncode( { content = Content; embeds = { Embed } } );
            };
        end)
    end
}

return xlp
